" -----------------------------------------------------------------------------
"  公共函数
" -----------------------------------------------------------------------------
"获取当前文件名
function! GetFileName()
    return bufname(winbufnr(winnr()))  "获取当前窗口缓冲区的名字
endfunction

"获取当前时间，精确到分
function! GetDateTime()
    return strftime("%Y-%m-%d %H:%M")
endfunction

"获取指定字符重复次数的字符串
function! GetRepeatChar(char, count)
    let str = ''
	for a in range(a:count)
        let str = str.a:char
	endfor
    return str
endfunction

function! KyoExecStdout(...)
    if a:0
        let cmd = a:1
    else
        let cmd = '/tmp/run.sh'
    endif
    let str = getline(line('.'))
    if stridx(str, '''') != -1
        echomsg 'signal quote is not allowed!'
        return
    endif
    let tmpfile = system('mktemp | tr -d "\n"')
    silent exec '! path='.tmpfile.' '.cmd.' '''.str.''''
    silent exec 'normal dd'
    silent exec 'r '.tmpfile
    silent exec '! rm -f ' . tmpfile
    silent exec 'redraw!'
endfunction

nmap ,x :call KyoExecStdout()<CR><CR>

function! KyoExecCommand(op)
    if a:op == 1
        silent exec '! fcitx-remote -o'
    else
        silent exec '! fcitx-remote -c'
    endif
    silent exec 'redraw!'
endfunction

function! KyoJavaApi()
    silent exec '! japi "\<'.expand("<cword>").'\>" w3m'
    silent exec 'redraw!'
endfunction

function! KyoMySQLRun()
    let file = GetFileName()
    exec 'botright 10 split MySQL'
    exec 'r! sql '.file
    exec 'normal gg'
    exec 'normal dd'
    setlocal buflisted
    setlocal bufhidden=delete
    setlocal buftype=nofile
    setlocal nomodifiable
    setlocal noswapfile
    exec 'wincmd w'
endfunction

set foldmethod=indent

nmap ,jd :call KyoJavaApi()<CR><CR>
nmap ,qr :! clear;sql <C-R>=GetFileName()<CR><CR>
" nmap ,qr :call KyoMySQLRun()<CR><CR>

" imap <ESC> <ESC>:call KyoExecCommand()<CR>
" nmap i <ESC>:call KyoExecCommand('hello')<CR>
" autocmd InsertLeave * call KyoExecCommand(0)
" autocmd InsertEnter * call KyoExecCommand(1)

" -----------------------------------------------------------------------------
"  其它
" -----------------------------------------------------------------------------

"打印当前日期
nnoremap ,date  i<C-R>=strftime("%Y-%m-%d")<ESC>:<CR>
"nnoremap ,date :r!date +\%Y-\%m-\%d:<CR>

"打印当前路径
if (g:islinux)
    nnoremap ,pwd i<C-R>=getcwd().'/'.GetFileName()<ESC><CR>
else
    nnoremap ,pwd i<C-R>=getcwd().'\'.GetFileName()<ESC><CR>
endif

"插入分割线
nnoremap ,kl i<C-R>=GetRepeatChar('-', 79)<ESC><CR>
nnoremap ,kg i<C-R>=GetRepeatChar('=', 79)<ESC><CR>

"自动给函数加括号
let @q="o{}ioj"

"javacomplete 自己写的脚本自动编译或运行java程序
" nnoremap ,jr :! clear && jvr <C-R>=GetFileName()<CR><CR>

function! KyoPythonEntry()
    if getfsize(GetFileName()) != -1
        return
    endif
    call setline(1, ['#!/usr/bin/env python3', '',
\'def main():', '    pass', '',
\'if __name__ == "__main__":', '    main()'])
    return setpos('.', [bufnr('%'), 4, 5])
endfunction

autocmd FileType python call KyoPythonEntry()

function! KyoPythonClassEntry(classname)
    if a:classname == ""
        let classname = input("ClassName: ")
    else
        let classname = a:classname
    endif

    let s=['#!/usr/bin/env python3', '',
\'class '.classname.':',
\'    def __init__(self):',
\'        pass', '',
\'    def __str__(self):',
\'        return ""', '',
\'if __name__ == "__main__":',
\'    c = '.classname.'()',
\'    print(c)']

    call setline(1, s)
    return setpos('.', [bufnr('%'), 12, 4])
endfunction

nmap ,py :call KyoPythonClassEntry("Test")<CR><CR>
nmap ,pyd :call KyoPythonClassEntry("")<CR>

nnoremap ,pr iSystem.out.printf("");<ESC>2hi
nmap ,2rr :! clear ;echo -e "\033[31m以下为python2程序运行结果\033[0m";python2 %<CR>
nmap ,rr :! clear ;echo -e "\033[31m以下为python3程序运行结果\033[0m";python3 %<CR>
nmap ,sh :! clear ;echo -e "\033[31m以下为bash程序运行结果\033[0m";bash %<CR>
nmap ,go :! clear ;echo -e "\033[31m以下为go程序运行结果\033[0m";go run %<CR>
nmap ,jr :! clear ;echo -e "\033[31m以下为java程序运行结果\033[0m";javac % && java %<CR>

" nmap ,sql :! mysql -uroot -p123456 -t mysql < %<CR>
nmap ,sql :! mysql -uroot -t mysql < %<CR>
" -----------------------------------------------------------------------------
"  MySQL
" -----------------------------------------------------------------------------
function! KyoMySQLCmdView()
    let file = GetFileName()
    silent exec ':w'

    if bufwinnr(2) == -1
        " silent exec 'botright 15 split  -MySQL-'
        silent exec 'botright split  -MySQL-'
    elseif winnr() == 1
        silent exec 'wincmd w'
    endif
    setlocal modifiable
    silent exec 'normal ggVGx'
    silent exec ':r! ksql run $(realpath '.file.')'
    setlocal buflisted
    setlocal bufhidden=delete
    setlocal buftype=nofile
    setlocal nomodifiable
    setlocal noswapfile
    setlocal nowrap
    silent exec 'wincmd w'
endfunction

nnoremap ,s :call KyoMySQLCmdView()<CR><CR>

vnoremap 'y :w! /tmp/kyo.vim<CR>:call KyoCopySel()<CR><CR>
vmap "y :w !pbcopy<CR><CR>
nmap "p :r !pbpaste<CR><CR>



"--- 跨终端粘贴
let g:copy_file=$HOME.'/.vim_copybuffer'
" let g:copy_file="/tmp/kyo.vim"
function Write_copy_file()
    ""本函数将 @" 缓冲区内容写入文件
    let lines=split(@", "\n")
    call writefile(lines,g:copy_file)
endfunction

function Read_copy_file()
    "将copy_file文件写入@" 缓冲区，并且粘贴
    let l:buf=readfile(g:copy_file)
    let @"=join(l:buf,"\n")
    normal ""p
endfunction

nmap <silent> ;y :call Write_copy_file()<Enter>
nmap <silent> ;p :call Read_copy_file()<Enter>
